---
layout: post
title: 'Code Exploitation and Metasploit'
date: 2016-08-14 16:27:08
categories: post
---
<p>Is a Ruby framework made to simplify the writing and execution of exploits.</p>
<p>Can be used in GUI<br />
-CobaltStrike (Red Teaming/State-Sponsored Persistent Hacking)<br />
-Armitage (PenTesting)</p>
<p>The framework has a very well-designed CLI. The CLI also provides the most control to the user, which makes it more powerful but also more difficult to navigate at first for all the options. On Unix based OSes any commands that aren&#8217;t dedicated are executed as they would be in terminal, making the framework extremely flexible and easy to stay within during an operation.</p>
<p>Deals primarily with the Exploitation and Post-Exploitation stages of accessing a target, but also has some functions that deal with Vulnerability analysis, threat modeling, and intelligence gathering.</p>
<h3>EXPLOITS</h3>
<p>Exploits have a different focus from regular programming. While most programming consists in trying to make the computer speak the same language as yourself, writing exploits means understanding how the computer processes information and taking advantage of the specifics.</p>
<p>This is not inherently any different than taking advantage of someone for some physical or psychological defect:<br />
-playing to someone&#8217;s narcisism to scam them<br />
-robbing someone weak or enfeebled because they can&#8217;t fight back</p>
<p>Exploitation depends on knowing (fingerprinting) the system that is being targeted.</p>
<ul>
<li>architecture</li>
<li>(likely) source code</li>
<li>application structures</li>
<li>common bugs/errors</li>
<li>firewalls/antivirus/filters/protections</li>
<li>validations (how does a computer verify a user&#8217;s identity)</li>
<li>password hashing (what is the process, can it be reverse engineered)</li>
</ul>
<p>This is especially useful as known exploits can be leveraged against a system only if you know the system you are dealing with.</p>
<p>After an exploitation is successfully run it is usually followed by payload code, which is where the person who hacked the machine gets the information or privileges they were initially after. An exploitation without a payload is just an error. An exploitation with a payload is a compromised machine.</p>
<h3>OVERFLOWS AND SMASHING</h3>
<p><em>Heap Overflows</em></p>
<p>Heap memory is dynamically allocated and is destroyed on one of two conditions:<br />
-memory is freed internal to the program<br />
-the program is closed</p>
<p>Heap memory can also create global variables, unlike stack memory, which can lessen scope problems, but carries all the known problems of global variables. As heap memory is not allocated automatically (instead it&#8217;s allocated by a user or program) it is often less efficient than stack memory.</p>
<p>Creating an overflow allows you to write the headers for the next piece of memory that will be allocated. When that memory is then allocated with the corrupted header an exception is raised that allows for arbitrary code execution. This is not a stable form of exploitation as heap memory functions change with regular OS updates.</p>
<p><em>Stack Overflows</em></p>
<p>Stack memory is where local variables are stored, usually until the variable is called on and returns it&#8217;s value. Stack variables are created by functions that are executing. Those variables are cleared once the function has executed, which can lead to bugs if some future function attempts to call on them later. This is simply an issue of mishandled variable scope.</p>
<p>Writing more data than can be fit into a given variable has the typical result of corrupting nearby areas of memory with the excess data.</p>
<p>This is a very old form of taking control of a machine and numerous protections have arisen against it</p>
<ul>
<li>stack canaries
<ul>
<li>an area of memory of arbitrary value that will only be overwritten in an overflow</li>
<li>if the area is overwritten, it prevents the execution of arbitrary code</li>
</ul>
</li>
<li>non-executable stack
<ul>
<li>prevents execution of code purely from memory</li>
<li>is weak against shellcode written to memory as it&#8217;s only checking for shellcode</li>
</ul>
</li>
<li>randomization
<ul>
<li>literally just randomizes the memory addresses for executing code</li>
<li>takes advantage of the fact that the attacker needs to know where to look in memory to execute their code</li>
<li>usually randomization does not occur in every instance, but is contingent</li>
</ul>
</li>
</ul>
<p><em>Integer Overflows</em></p>
<p>The creation of a numeric value that is too large to be stored in the space allocated. Some computers make assumptions about the value that such operations will return (such as that it will only return a positive integer). Integer overflows can violate these expectations by returning unaccounted for values. As such, the results of such an overflow can be unpredictable in many instances, leading to results that are occasionally exploitable.<br />
<em>Use-after-free</em></p>
<p>Rely on Heap memory but takes advantage of a different aspect than Heap Overflows. It creates a heap entity, then calls on that piece of memory after it has been freed. As the memory has been deallocated by the time it&#8217;s called it allows the execution process to be taken over.</p>
<h3>WHY METASPLOIT</h3>
<p>Though the principles of exploitation are relatively simple, performing these operations manually has limits. It may work well in a situation where there is only one machine to be compromised, but attempting to compromise a network or even just several unrelated computers of the same type and vulnerability is difficult to scale.</p>
<p>Metasploit stands in relation to exploits the way metaprogramming stands against programming: metasploit creates exploits that create exploits.</p>
<p>This allows the user to focus more on the specifics of an exploit rather than making it extensible. It also allows exploits to be changed quickly under shifting circumstances.</p>
<p>Metasploit also provides numerous exploits and plugins that don&#8217;t have to be sourced for use.</p>
<p>There are also options to encode modules (where exploits are stored) in such a way that systems cannot detect malicious code even if the exploit is known to the system.</p>
<p>Metasploit is not a replacement for knowledge. It&#8217;s tools usually require some knowledge about what is actually being done. It does not perform reconaissance for you, nor does it decide what is the right exploit for the job. At no point does it protect or anonymize your identity. It only aids in carrying out reconaissance, exploitations, and post-exploitation executions. The most it does for you is in the (post-)exploitation stage. It will, for example, clear logs that recorded your activity during the time you gained access to the system, but it will only do so if told specifically. Not knowing that you should do this is as deadly as lazily or arrogantly leaving traces that could reach you.</p>
<p>If manually programming exploits against a server is taking a handsaw to a tree, metasploit is taking a chainsaw against a forest.</p>
<p>&nbsp;</p>
<h3>Examples of Defacements:</h3>
<p>Advisory/Warning/Pentesting<br />
<a href="http://zonehmirrors.org/defaced/2016/08/04/edeso.gov.co/edeso.gov.co">http://zonehmirrors.org/defaced/2016/08/04/edeso.gov.co/edeso.gov.co</a></p>
<p>Political<br />
<a href="http://zonehmirrors.org/defaced/2016/04/29/www.bw.one.un.org/www.bw.one.un.org">http://zonehmirrors.org/defaced/2016/04/29/www.bw.one.un.org/www.bw.one.un.org</a><br />
<a href="http://zonehmirrors.org/defaced/2003/05/18/www.frontnational.com/">http://zonehmirrors.org/defaced/2003/05/18/www.frontnational.com/</a></p>
<p>Adventurism<br />
<a href="http://zonehmirrors.org/defaced/2016/08/06/www.sepo.go.th/www.sepo.go.th">http://zonehmirrors.org/defaced/2016/08/06/www.sepo.go.th/www.sepo.go.th</a></p>
<h3>References</h3>
<p><a href="https://stackoverflow.com/questions/2308751/what-is-a-memory-heap" rel="nofollow">https://stackoverflow.com/questions/2308751/what-is-a-memory-heap</a><br />
<a href="https://stackoverflow.com/questions/2913618/how-is-integer-overflow-exploitable" rel="nofollow">https://stackoverflow.com/questions/2913618/how-is-integer-overflow-exploitable</a><br />
<a href="https://www.kb.cert.org/vuls/id/945216" rel="nofollow">https://www.kb.cert.org/vuls/id/945216</a> (SSH1 Vulnerability)<br />
<a href="https://en.wikipedia.org/wiki/Memory_management" rel="nofollow">https://en.wikipedia.org/wiki/Memory_management</a><br />
<a href="http://www.thegreycorner.com/2010/03/difference-between-heap-overflow-and.html" rel="nofollow">http://www.thegreycorner.com/2010/03/difference-between-heap-overflow-and.html</a><br />
<a href="https://en.wikipedia.org/wiki/Integer_overflow" rel="nofollow">https://en.wikipedia.org/wiki/Integer_overflow</a><br />
<a href="https://en.wikipedia.org/wiki/Stack_buffer_overflow" rel="nofollow">https://en.wikipedia.org/wiki/Stack_buffer_overflow</a><br />
<a href="https://en.wikipedia.org/wiki/Buffer_overflow" rel="nofollow">https://en.wikipedia.org/wiki/Buffer_overflow</a><br />
<a href="http://gribblelab.org/CBootcamp/7_Memory_Stack_vs_Heap.html" rel="nofollow">http://gribblelab.org/CBootcamp/7_Memory_Stack_vs_Heap.html</a><br />
